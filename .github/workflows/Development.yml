# This is a basic workflow to help you get started with Actions

name: Deploy to Snowflake

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: 
      - main
      - 'Upload_branch_2024-11-05'
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      REPO_NAME: "GIT.CI_CD_GIT_REPO"
      # Read connection secrets
      SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get branch name
        id: get-branch-name
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          else
            echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: Get Repo name
        id: get-repo-name
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)" >> $GITHUB_OUTPUT
          else
            echo "REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: Print branch name
        run: |
          echo "Branch name: ${{ steps.get-branch-name.outputs.BRANCH_NAME }}"
        shell: bash

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # - name: Install Python packages
      #   run: pip install -r requirements.txt
      
      - name: Install SNOW CLI Python packages
        run: pip install snowflake-cli-labs
      # Install Snowflake CLI GitHub Action and point to config file
      # - uses: Snowflake-Labs/snowflake-cli-action@v1
      #   with:
      #     cli-version: "latest"
      #     default-config-file-path: "config.toml"

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          # Avoid using single or double quotes for multiline patterns
          files: |
            **.sql
          files_ignore: CI_CD/CICD_Setup.sql
        # To compare changes between the current commit and
        # the last pushed remote commit set `since_last_remote_commit: true`. e.g
        # with:
        #   since_last_remote_commit: true 
      - name: List all changed files
        id: filestats
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          content=""
          for file in ${ALL_CHANGED_FILES}; do
            echo "$file was changed"
            content+="$file"
            content+=";\n"
          done
          echo "$content"
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # # Snowflake CLI installation
      # - uses: Snowflake-Labs/snowflake-cli-action@v1
      #   with:
      #     cli-version: "latest"
      #     default-config-file-path: "config.toml"
      
      # - name: Overwrite file
      #   uses: BoundfoxStudios/action-write-file@v1
      #   env:
      #     ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
      #   with:
      #       path: Scripts/file.csv
      #       write-mode: overwrite            
      #       contents: ${{ secrets.SNOWFLAKE_ACCOUNT }}
            
      # - name: Commit & Push
      #   uses: Andro999b/push@v1.3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: main
      #     force: true
      #     message: 'Overwritten by Github Actions - ${date}'

      - name: Configure SnowCLI
        env:
          SNOWFLAKE_CONNECTIONS_DEV_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        run: |
          cd $GITHUB_WORKSPACE
          echo "[connections]" > config.toml
          echo "[connections.dev]" >> config.toml
          echo "account = \"$SNOWFLAKE_CONNECTIONS_DEV_ACCOUNT\"" >> config.toml

      # Use the CLI
      - name: Test version
        run: snow --version
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Deploy data pipeline
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE}}
          SNOWFLAKE_DB_NAME: "DWH_CI_CD"
          CURRENT_BRANCH:  ${{ steps.get-branch-name.outputs.BRANCH_NAME }}
          CURRENT_REPO: ${{ steps.get-repo-name.outputs.REPO_NAME }}
          GIT_USERID:  ${{ secrets.GIT_USERID}}
          GIT_PAT: ${{ secrets.GIT_PAT}}
          SNOWFLAKE_SCHEMA: "CI_CD"
          SNOWFLAKE_TARGET_DB_NAME: "DWH_CI_CD_STAGE"
          # SNOWFLAKE_REPO_NAME: "GIT.CI_CD_GIT_REPO"
          # SNOWFLAKE_REPO_PATH: "@CI_CD_GIT_REPO/branches/Upload_branch_2024-11-05/"
        run: |
            # snow sql -q "select * from PRD_SMNTC_LAYER.CI_CD.CONFIG" --temporary-connection --account $SNOWFLAKE_ACCOUNT --user $SNOWFLAKE_USER --role $SNOWFLAKE_ROLE --warehouse $SNOWFLAKE_WAREHOUSE --password $SNOWFLAKE_PASSWORD --database SNOWFLAKE_DB_NAME
            # snow --config-file="C:\SourceCode\Private_Git\CI_CD\config.toml"  connection test --connection Dummy
            # snow sql -q "ALTER GIT REPOSITORY GIT.CI_CD_GIT_REPO FETCH" --temporary-connection --account $SNOWFLAKE_ACCOUNT --user $SNOWFLAKE_USER --role $SNOWFLAKE_ROLE --warehouse $SNOWFLAKE_WAREHOUSE --password $SNOWFLAKE_PASSWORD --database $SNOWFLAKE_DB_NAME
            # snow sql -q "EXECUTE IMMEDIATE FROM @quickstart_common.public.quickstart_repo/branches/main/deploy_parameterized_pipeline.sql USING (environment => 'prod', retention_time => 1)" --temporary-connection --account $SNOWFLAKE_ACCOUNT --user $SNOWFLAKE_USER --role $SNOWFLAKE_ROLE --warehouse $SNOWFLAKE_WAREHOUSE
            # snow sql -q 'CALL GIT.DEPLOY_SCRIPT_New('<% database %>')' -D "database= $SNOWFLAKE_DB_NAME" --temporary-connection --account $SNOWFLAKE_ACCOUNT --user $SNOWFLAKE_USER --password $SNOWFLAKE_PASSWORD --role $SNOWFLAKE_ROLE --warehouse $SNOWFLAKE_WAREHOUSE --database $SNOWFLAKE_DB_NAME
            for file in ${ALL_CHANGED_FILES}; do
                echo "Deploying $file......"
                snow sql -q "CALL CI_CD.SP_DEPLOY_SCRIPT_API('<% user_id %>','<% pat %>','<% repo %>','<% source_branch %>','<% script %>','<% targetdatabase %>' 
                )" -D "user_id= $GIT_USERID" -D "pat= $GIT_PAT" -D "repo= $CURRENT_REPO" -D "source_branch= $CURRENT_BRANCH" -D "script= $file" -D "targetdatabase= $SNOWFLAKE_TARGET_DB_NAME" --temporary-connection --account $SNOWFLAKE_ACCOUNT --user $SNOWFLAKE_USER --password $SNOWFLAKE_PASSWORD --role $SNOWFLAKE_ROLE --warehouse $SNOWFLAKE_WAREHOUSE --database $SNOWFLAKE_DB_NAME --schema $SNOWFLAKE_SCHEMA 
                # snow sql -q "CALL GIT.DEPLOY_SCRIPT('<% branch %>','<% script %>','<% targetdatabase %>')" -D "branch= $SNOWFLAKE_REPO_PATH" -D "script= $file" -D "targetdatabase= $SNOWFLAKE_TARGET_DB_NAME" --temporary-connection --account $SNOWFLAKE_ACCOUNT --user $SNOWFLAKE_USER --password $SNOWFLAKE_PASSWORD --role $SNOWFLAKE_ROLE --warehouse $SNOWFLAKE_WAREHOUSE --database $SNOWFLAKE_DB_NAME --schema $SNOWFLAKE_GIT_SCHEMA
            done
