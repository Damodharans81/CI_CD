#!jinja
CREATE SCHEMA IF NOT EXISTS {{dbname}}.CI_CD;

CREATE OR ALTER TABLE {{dbname}}.CI_CD.CONFIG 
(
    ID NUMBER(38, 0) AUTOINCREMENT START 1 INCREMENT 1,
    TYPE VARCHAR,
    SEQ_ORDER NUMBER(38, 0) NULL,
    LASTMODIFIED_DATE  TIMESTAMP_LTZ DEFAULT CURRENT_TIMESTAMP()
);

INSERT OVERWRITE INTO {{dbname}}.CI_CD.CONFIG (TYPE,SEQ_ORDER)
  VALUES
  ('DATABASE',1),
  ('SCHEMA',2),
  ('TABLE',3),
  ('STORED_PROCEDURE',4),
  ('VIEW',5);

CREATE OR ALTER TABLE {{dbname}}.CI_CD.CHANGE_HISTORY 
(

    CHANGE_ID NUMBER(38, 0) AUTOINCREMENT START 1 INCREMENT 1,
    VERSION_ID NUMBER(38, 0) NULL,
    DESCRIPTION VARCHAR,
    SCRIPT VARCHAR,
    SCRIPT_TYPE VARCHAR,
    MODIFIED_DATE  TIMESTAMP_LTZ DEFAULT CURRENT_TIMESTAMP(),
    STATUS VARCHAR,
    INSTALLED_BY VARCHAR,
    INSTALLED_ON TIMESTAMP_LTZ
);

 -- DDL for the Sequence object
CREATE OR REPLACE SEQUENCE {{dbname}}.CI_CD.RELEASE_SEQ START = 1 INCREMENT = 1 ORDER;



CREATE OR REPLACE PROCEDURE {{dbname}}.CI_CD.DEPLOY(dbname VARCHAR )
RETURNS VARCHAR 
LANGUAGE SQL
AS
DECLARE
  query VARCHAR;
  res varchar;
BEGIN
  res:= 'SUCCESS';
  // Fetch the latest updates from Github
  query := ' ALTER GIT REPOSITORY '|| dbname ||'.PUBLIC.CI_CD_GIT_REPO FETCH ;'; 
  EXECUTE IMMEDIATE :query ;

  // Generate a new number from our sequence to associate with the release.
  select common.release_seq.nextval;
  
  RETURN query;
END;
